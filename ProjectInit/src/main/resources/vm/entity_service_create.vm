#set($entity=${entity})
package ${entity.packageName};

import ${entity.type.DataSupportClass.name};
#if(${entity.type.list})
import java.util.Map;
#end

import ${entity.entityPackage}.${entity.boName};
import ${entity.entityPackage}.${entity.doName};

public class ${entity.serviceName} {
	private volatile static ${entity.serviceName} instance = new ${entity.serviceName}();
#if(${entity.type} == 'CACHE_ENTITY')
	private static CacheDataSupport<${entity.keyType}, ${entity.doName}, ${entity.boName}> dataSupport = new CacheDataSupport<>(${entity.doName}.class, ${entity.boName}::new);
#elseif(${entity.type} == 'DB_ENTITY')
	private static DbDataSupport<${entity.keyType}, ${entity.doName}, ${entity.boName}> dataSupport = new DbDataSupport<>(${entity.doName}.class, ${entity.boName}::new);
#elseif(${entity.type} == 'REDIS_ENTITY')
	private static RedisDataSupport<${entity.keyType}, ${entity.doName}, ${entity.boName}> dataSupport = new RedisDataSupport<>(${entity.redis}.getInstance(), ${entity.doName}.class, ${entity.boName}::new);
#end

	private ${entity.serviceName} () {
		if (instance != null) {
			throw new RuntimeException("Instance Duplication!");
		}
	}

	public static ${entity.serviceName} getInstance() {
		return instance;
	}

	/***
	* 获得一个 ${entity.boName} 对象
	* @param ${entity.keyName} 获取对象的主键
	* @return ${entity.boName} 对象
	*/
	public ${entity.boName} get${entity.boName}(${entity.keyType} ${entity.keyName}) {
		return dataSupport.getBo(${entity.keyName});
	}
}
