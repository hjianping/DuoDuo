#set($define=${define})
package ${define.packageName};

import ${define.type.DataSupportClass.name};
#if(${define.type.list})
import java.util.Map;
#end

import ${define.entityPackage}.${define.boName};
import ${define.entityPackage}.${define.doName};

public class ${define.serviceName} {
	private volatile static ${define.serviceName} instance = new ${define.serviceName}();
#if(${define.type} == 'CACHE_ENTITY')
	private static CacheDataSupport<${define.keyType}, ${define.doName}, ${define.boName}> dataSupport = new CacheDataSupport<>(${define.doName}.class, ${define.boName}::new);
#elseif(${define.type} == 'DB_ENTITY')
	private static DbDataSupport<${define.keyType}, ${define.doName}, ${define.boName}> dataSupport = new DbDataSupport<>(${define.doName}.class, ${define.boName}::new);
#elseif(${define.type} == 'REDIS_ENTITY')
	private static RedisDataSupport<${define.keyType}, ${define.doName}, ${define.boName}> dataSupport = new RedisDataSupport<>(${define.redis}.getInstance(), ${define.doName}.class, ${define.boName}::new);
#end

	private ${define.serviceName} () {
		if (instance != null) {
			throw new RuntimeException("Instance Duplication!");
		}
	}

	public static ${define.serviceName} getInstance() {
		return instance;
	}

	/***
	* 获得一个 ${define.boName} 对象
	* @param ${define.keyName} 获取对象的主键
	* @return ${define.boName} 对象
	*/
	public ${define.boName} get${define.boName}(${define.keyType} ${define.keyName}) {
		return dataSupport.getBo(${define.keyName});
	}
}
