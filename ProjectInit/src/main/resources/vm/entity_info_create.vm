#set($entityObj = ${allData.getEntity(${allData.currData.poref})})
#set($entityType = ${entityObj.type})
#set($entityInfoType = ${entityType.InfoType})
#set($entityDbInfoType = ${entityType.DbInfoType})
package ${allData.currData.InfoPackagePath};

import ${allData.currData.redis.clazz};
import ${allData.currData.dbinfo.clazz};
import ${allData.currData.rediskey.clazz};
import ${entityInfoType.Clazz.name};
#if(${entityObj.name} != ${allData.currData.vo})
import ${entityObj.packagePath}.${allData.currData.vo};
#end
import ${entityObj.packagePath}.${entityObj.name};
import org.qiunet.data.redis.AbstractRedisUtil;
import org.qiunet.data.db.support.info.IEntityDbInfo;
#if(${entityDbInfoType.clazz.name} != "org.qiunet.data.db.support.info.IEntityDbInfo")
import ${entityDbInfoType.clazz.name};
#end

public class ${allData.currData.name} implements ${entityInfoType.toString()}<${entityObj.dbInfoKeyType}, #if(${entityObj.redisList})${entityObj.subKeyType}, #end${entityObj.name}, ${allData.currData.vo}> {

	@Override
	public String getNameSpace() {
		return "${allData.currData.nameSpace}";
	}

	@Override
	public Class<${entityObj.name}> getClazz() {
		return ${entityObj.name}.class;
	}

	@Override
	public boolean needAsync() {
        return ${allData.currData.async};
	}

	@Override
	public ${allData.currData.vo} getVo(${entityObj.name} po) {
#if(${allData.currData.vo} == ${entityObj.name})
		return po;
#else
		return new ${allData.currData.vo}(po);
#end
	}

	@Override
	public AbstractRedisUtil getRedisUtil() {
		return ${allData.currData.redis.name}.getInstance();
	}

	@Override
	public ${entityObj.dbInfoKeyType} getDbInfoKey(${entityObj.name} po) {
		return po.get#firstUpperCase(${entityObj.dbInfoKey})();
	}

	@Override
	public String getAsyncKey(Object dbInfoKey) {
		return RedisKey.${allData.currData.NameSpace.toUpperCase()}.getAsyncKey(dbInfoKey);
	}

#if(${entityObj.redisList})
	@Override
	public ${entityObj.subKeyType} getSubKey(${entityObj.name} po) {
		return po.getSubId();
	}

#end
	@Override
	public IEntityDbInfo getEntityDbInfo(${entityObj.name} po) {
#if(${entityObj.EntityType} == "RedisList")
		return getEntityDbInfo(getDbInfoKey(po), getSubKey(po));
#elseif(${entityObj.EntityType} == "RedisEntity")
		return getEntityDbInfo(getDbInfoKey(po));
#end
	}

#if(${entityObj.EntityType} == "RedisList")
	@Override
	public IEntityListDbInfo getEntityDbInfo(${entityObj.dbInfoKeyType} dbInfoKey, ${entityObj.subKeyType} subId) {
		 return new ${allData.currData.dbinfo.name}(dbInfoKey, subId);
	}
#elseif(${entityObj.EntityType} == "RedisEntity")
	@Override
	public IEntityDbInfo getEntityDbInfo(${entityObj.dbInfoKeyType} dbInfoKey) {
		return new ${allData.currData.dbinfo.name}(dbInfoKey);
	}
#end


	@Override
	public String getRedisKey(Object dbInfoKey) {
		return RedisKey.${allData.currData.NameSpace.toUpperCase()}.getKey(dbInfoKey);
	}
}
