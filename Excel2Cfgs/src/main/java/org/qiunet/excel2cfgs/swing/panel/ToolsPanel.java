package org.qiunet.excel2cfgs.swing.panel;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.qiunet.excel2cfgs.common.constants.UiConstant;
import org.qiunet.excel2cfgs.common.utils.StringUtil;
import org.qiunet.excel2cfgs.swing.SwingUtil;
import org.qiunet.excel2cfgs.swing.component.IconJPanel;
import org.qiunet.excel2cfgs.swing.enums.IconButtonType;
import org.qiunet.excel2cfgs.swing.listener.JButtonMouseListener;
import org.qiunet.excel2cfgs.swing.listener.JTextFieldHintListener;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Locale;

/***
 * 工具集合
 *
 * @author qiunet
 * 2021-03-02 12:12
 */
public class ToolsPanel extends IconJPanel implements ClipboardOwner {
    private JPanel showPanel;
    private JTextField hashCodeInput;
    private JButton hashcodeConvert;
    private JLabel hashCodeOutput;
    private final Clipboard clipboard;
    private static final String hashcodeInputDefaultText = "输入获取hashcode";

    public ToolsPanel() {
        this.clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();

        hashcodeConvert.addMouseListener(new JButtonMouseListener(hashcodeConvert, UiConstant.TOOL_BAR_BACK_COLOR, Color.WHITE));
        hashCodeInput.addFocusListener(new JTextFieldHintListener(hashCodeInput, hashcodeInputDefaultText));
        hashcodeConvert.addActionListener(e -> {
            String val = hashCodeInput.getText();
            if (StringUtil.isEmpty(val) || val.equals(hashcodeInputDefaultText)) {
                hashCodeOutput.setText("");
                return;
            }
            hashCodeOutput.setText(String.valueOf(val.hashCode()));
        });
        hashCodeOutput.setForeground(UiConstant.TOOL_BAR_BACK_COLOR);
        hashCodeOutput.setFont(UiConstant.DEFAULT_FONT);
        hashCodeOutput.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {
                    clipboard.setContents(new StringSelection(hashCodeOutput.getText()), ToolsPanel.this);
                    SwingUtil.promptMessage("复制成功");
                }
            }
        });
    }

    @Override
    public void activate() {
        hashCodeInput.setText(hashcodeInputDefaultText);
        hashCodeOutput.setText("");
    }

    @Override
    public void unActivate() {

    }

    @Override
    public void addToParent(ToolTabPanel toolTabPanel) {
        toolTabPanel.getPanelUp().add(getButton());
    }

    @Override
    public IconButtonType type() {
        return IconButtonType.tools;
    }

    @Override
    public JPanel getShowPanel() {
        return showPanel;
    }

    @Override
    public void lostOwnership(Clipboard clipboard, Transferable contents) {

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        showPanel = new JPanel();
        showPanel.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        hashCodeInput = new JTextField();
        Font hashCodeInputFont = this.$$$getFont$$$(null, -1, 20, hashCodeInput.getFont());
        if (hashCodeInputFont != null) hashCodeInput.setFont(hashCodeInputFont);
        showPanel.add(hashCodeInput, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(200, 36), new Dimension(200, 36), new Dimension(200, 36), 0, false));
        final Spacer spacer1 = new Spacer();
        showPanel.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        hashcodeConvert = new JButton();
        hashcodeConvert.setText("转换HashCode");
        showPanel.add(hashcodeConvert, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        hashCodeOutput = new JLabel();
        hashCodeOutput.setText("");
        hashCodeOutput.setToolTipText("双击复制文本");
        showPanel.add(hashCodeOutput, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return showPanel;
    }
}
