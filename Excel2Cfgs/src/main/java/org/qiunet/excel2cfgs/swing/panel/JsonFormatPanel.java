package org.qiunet.excel2cfgs.swing.panel;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.qiunet.excel2cfgs.common.constants.UiConstant;
import org.qiunet.excel2cfgs.swing.SwingUtil;
import org.qiunet.excel2cfgs.swing.component.IconJPanel;
import org.qiunet.excel2cfgs.swing.enums.IconButtonType;
import org.qiunet.excel2cfgs.swing.listener.JButtonMouseListener;
import org.qiunet.utils.string.StringUtil;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

/***
 * json 格式化的面板
 * @Author qiunet
 * @Date 2021/2/9 21:57
 **/
public class JsonFormatPanel extends IconJPanel {

    private JPanel showPanel;
    private JTextArea originJson;
    private JButton formatJsonBtn;
    private JTextArea formatJson;

    public JsonFormatPanel() {
        formatJsonBtn.addMouseListener(new JButtonMouseListener(formatJsonBtn, UiConstant.TOOL_BAR_BACK_COLOR, Color.white));
        formatJsonBtn.addActionListener(e -> {
            String string = originJson.getText();
            String trim = string.trim();
            if (StringUtil.isEmpty(trim)) {
                return;
            }

            Object result;
            try {
                if (trim.startsWith("{")) {
                    result = JSONObject.parseObject(string);
                } else {
                    result = JSONArray.parseArray(trim);
                }
            } catch (Exception ex) {
                SwingUtil.alterError(ex.getMessage());
                ex.printStackTrace();
                return;
            }
            String jsonString = JSON.toJSONString(result, SerializerFeature.PrettyFormat, SerializerFeature.WriteMapNullValue,
                    SerializerFeature.WriteDateUseDateFormat);
            jsonString = jsonString.replaceAll("\\t", "    ").replaceAll(":", " : ");
            formatJson.setText(jsonString);
        });
    }

    @Override
    public void unActivate() {
        formatJson.setText("");
        originJson.setText("");
    }

    @Override
    public void activate() {

    }


    @Override
    public IconButtonType type() {
        return IconButtonType.json;
    }

    @Override
    public JPanel getShowPanel() {
        return showPanel;
    }

    @Override
    public void addToParent(ToolTabPanel toolTabPanel) {
        toolTabPanel.getPanelUp().add(this.getButton());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        showPanel = new JPanel();
        showPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        showPanel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(920, 90), new Dimension(920, 90), new Dimension(920, 90), 0, false));
        scrollPane1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Json输入", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        originJson = new JTextArea();
        Font originJsonFont = this.$$$getFont$$$(null, -1, 16, originJson.getFont());
        if (originJsonFont != null) originJson.setFont(originJsonFont);
        originJson.setLineWrap(true);
        originJson.setMaximumSize(new Dimension(920, 2147483647));
        originJson.setMinimumSize(new Dimension(920, 88));
        scrollPane1.setViewportView(originJson);
        formatJsonBtn = new JButton();
        Font formatJsonBtnFont = this.$$$getFont$$$(null, Font.BOLD, 18, formatJsonBtn.getFont());
        if (formatJsonBtnFont != null) formatJsonBtn.setFont(formatJsonBtnFont);
        formatJsonBtn.setText("↓↓格式化Json↓↓");
        showPanel.add(formatJsonBtn, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane2 = new JScrollPane();
        showPanel.add(scrollPane2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(920, 450), new Dimension(920, 450), new Dimension(920, 450), 0, false));
        scrollPane2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Json输出", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        formatJson = new JTextArea();
        formatJson.setEditable(false);
        Font formatJsonFont = this.$$$getFont$$$(null, -1, 18, formatJson.getFont());
        if (formatJsonFont != null) formatJson.setFont(formatJsonFont);
        formatJson.setMaximumSize(new Dimension(920, 2147483647));
        formatJson.setMinimumSize(new Dimension(920, 446));
        scrollPane2.setViewportView(formatJson);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return showPanel;
    }
}
